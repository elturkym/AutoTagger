require 'preprocessing_stage/preproc_helper'
module PreprocessingStage::LinkProbability

@@lableOccurrence = {}

def self.linkProbabilityTable
nodes = parse_XML_file
nameSpaceFlag=true
nodes.each do |node|
  if (node.name == 'ns' && node.inner_xml !='')
    puts "Number #{node.inner_xml.to_i}"
    if (node.inner_xml.to_i == 0)
      nameSpaceFlag = true
    else
      nameSpaceFlag = false
    end
  end
  
  if nameSpaceFlag && node.name == 'text'  # && !node.inner_xml.include?('#')
      lables=extract_anchor_labels_from_text node.inner_xml
      lables.each do |link|
        params = split_link(link[0])
        @@lableOccurrence[params[0]] = @@lableOccurrence[params[0]] == nil ? 1:@@lableOccurrence[params[0]]+1
        #puts @@lableOccurrence
        #puts "**********************************************************************"
      end
  end
end

# create the table using the lableOccurrence {}

end


#Parse XML file
def self.parse_XML_file
  reader = Nokogiri::XML::Reader(File.open(XML_FILE))
end

private

# input   page body
# output label of links in this page
def self.extract_anchor_labels_from_text body
  lables=body.scan(LINK_PATTERN)
  return lables
end

def self.split_link link
  page_title, anchor_text = link.split('|')
  return nil if page_title.nil? # Empty
  return nil if page_title.include?('#') # never seen but okey
  anchor_text = page_title if anchor_text.nil?

  if anchor_text.empty?
    l = page_title.rindex(/\(.*\)$/)
    r = l != nil && l != 0  ? page_title[l..-1]  : ''
    anchor_text = page_title.gsub(r,'').strip
  end
  a = anchor_text.gsub(/["'\{\}]/,'').strip
  # anchor (egypt) ==> egypt
  a = a[1..-2].strip if /^\(.*\)$/ === a
  p = page_title.gsub(/["']/,'').strip.gsub(' ', '_')
    return nil if a.is_i? || a.is_stopword? || p.is_i? || p.is_stopword?
    return nil if a.length < 3 || p.length < 3
    [a, p]
end

end
